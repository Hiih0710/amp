public class LifeCycleofFragment extends Fragment {

 String tag = "Life Cycle of Fragment";

 // TODO: Rename parameter arguments, choose names that match

 // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER

 private static final String ARG_PARAM1 = "param1";

 private static final String ARG_PARAM2 = "param2";

 // TODO: Rename and change types of parameters

 private String mParam1;

 private String mParam2;

 private OnFragmentInteractionListener mListener;

 public LifeCycleofFragment() {

 // TODO: Rename and change types and number of parameters

 public static LifeCycleofFragment newInstance(String param1, String 

param2) {

 LifeCycleofFragment fragment = new LifeCycleofFragment();

 Bundle args = new Bundle();

 args.putString(ARG_PARAM1, param1);

 args.putString(ARG_PARAM2, param2);

 fragment.setArguments(args);

 return fragment;

 }

 @Override

 public void onCreate(Bundle savedInstanceState) {

 super.onCreate(savedInstanceState);

 if (getArguments() != null) {

 mParam1 = getArguments().getString(ARG_PARAM1);

 mParam2 = getArguments().getString(ARG_PARAM2);

 }

 }

 @Override

 public View onCreateView(LayoutInflater inflater, ViewGroup container,

 Bundle savedInstanceState) {

return inflater.inflate(R.layout.fragment_life_cycleof, container, 

false);

 }

 // TODO: Rename method, update argument and hook method into UI event

 public void onButtonPressed(Uri uri) {

 if (mListener != null) {

 mListener.onFragmentInteraction(uri);

 }

 }

 @Override

 public void onAttach(Context context) {

 super.onAttach(context);

 if (context instanceof OnFragmentInteractionListener) {

 mListener = (OnFragmentInteractionListener) context;

 } else {

 throw new RuntimeException(context.toString()

 + " must implement OnFragmentInteractionListener");

 }

 }

 @Override

 public void onDetach() {

 super.onDetach();

 mListener = null;

 }

 public interface OnFragmentInteractionListener {

 // TODO: Update argument type and name

 void onFragmentInteraction(Uri uri);

 }

 public void onStart()

 {

 super.onStart();

 Log.d(tag,"In the onStart() event");

 }

 public void onRestart()

 {

 Log.d(tag,"In the onRestart() event");

 }

 public void onPause()

 {

 super.onPause();

 Log.d(tag,"In the onPause() event");

 }

 public void onStop()

 {

 super.onStop();

 Log.d(tag,"In the onStop() event");

 }

public void onDestroy()

 {

 super.onDestroy();

 Log.d(tag,"In the onDestroy() event");

 }

}
